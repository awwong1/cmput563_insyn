"""
Baseline models for Hidden Markov Models with discrete emissions
"""
import numpy as np

from hmmlearn.hmm import MultinomialHMM
from analyze.parser import SourceCodeParser

TEST_SEQ = """
34 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 37 11 2 19 2 77 2 76 67 37 2 65 66 67 42 65 2 73 11 66 71 68 68 1
34 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 37 11 2 19 2 67 2 2 71 2 2 71 2 2 71 2 2 71 29 2 71 29 2 71 2 2 71 29 2 71 22 2 71 22 2 71 2 77 2 76 2 71 37 50 2 65 2 73 2 73 2 2 66 67 2 75 2 71 68 2 2 71 37 50 2 65 66 67 25 65 2 85 61 66 67 2 73 2 65 66 71 2 65 66 71 2 73 2 65 66 71 68 68 112 2 36 50 2 65 29 2 72 29 2 66 67 29 2 75 2 65 53 72 2 66 71 29 2 75 2 65 53 72 2 66 71 2 75 2 73 2 65 2 72 2 66 71 2 65 2 72 2 66 71 2 75 33 2 65 65 22 66 65 2 91 2 66 93 53 90 2 72 65 22 66 65 2 91 2 66 93 53 90 2 66 71 2 75 2 91 2 92 53 71 2 75 2 73 2 65 55 72 55 66 71 2 73 2 65 53 66 71 2 73 2 65 33 2 73 2 65 66 67 112 2 37 50 2 65 2 2 66 67 2 75 65 22 66 2 73 2 65 66 71 2 75 2 73 2 65 2 66 71 2 65 66 71 2 65 66 71 68 68 66 71 68 37 29 2 65 29 2 72 29 2 66 67 29 2 71 29 2 75 2 73 2 65 2 66 71 29 2 75 2 73 2 65 2 66 71 25 65 2 82 2 73 2 66 67 2 75 2 71 68 17 25 65 2 82 2 73 2 66 67 2 75 2 73 2 65 2 72 2 66 71 68 17 67 2 75 2 71 68 38 2 71 68 112 2 36 50 2 65 2 2 66 67 2 73 2 65 66 71 2 73 2 65 2 73 2 72 2 73 2 90 2 66 71 2 65 2 72 2 66 71 2 73 2 65 2 65 2 66 72 2 66 71 2 73 2 65 53 72 2 65 2 66 72 55 72 2 66 71 2 73 2 65 66 71 68 22 69 70 2 65 2 77 2 76 2 66 67 22 69 70 2 75 33 22 69 2 73 2 65 66 70 71 23 65 29 2 75 53 71 2 77 2 73 2 65 66 71 2 88 66 67 2 69 2 70 75 2 73 2 65 2 66 71 68 38 2 71 68 50 2 65 2 2 72 2 2 66 67 2 73 2 65 53 72 53 72 2 65 53 66 72 53 72 2 66 71 2 73 2 65 53 72 53 72 53 72 2 65 53 66 72 2 66 71 22 2 75 55 71 23 65 29 2 75 53 71 2 83 53 71 2 88 66 67 2 73 2 65 2 65 2 92 2 66 72 2 65 53 66 72 2 65 2 92 2 66 72 2 65 55 66 92 55 72 2 66 71 68 23 65 29 2 75 53 71 2 83 53 71 2 88 66 67 2 73 2 65 2 65 53 66 72 2 65 2 92 2 66 72 2 65 55 66 92 55 72 2 65 2 92 2 66 72 2 66 71 68 68 50 2 65 66 67 2 73 2 65 2 65 2 66 66 71 2 73 2 65 2 65 2 66 66 71 68 37 2 65 2 2 66 67 42 65 2 66 71 2 65 66 71 68 37 2 65 2 2 72 2 2 66 67 42 65 2 72 2 66 71 2 65 66 71 68 35 50 2 65 66 67 2 75 33 2 65 66 71 2 73 2 65 2 73 2 73 2 66 71 2 73 2 65 2 73 2 66 71 2 73 2 65 55 66 71 2 73 2 65 55 66 71 2 73 2 65 59 66 71 2 75 53 71 2 75 33 2 65 66 71 2 73 2 65 2 73 2 73 2 66 71 2 73 2 65 2 73 2 66 71 2 73 2 65 55 66 71 2 73 2 65 59 66 71 2 75 33 2 65 66 71 2 73 2 65 2 73 2 73 2 66 71 2 73 2 65 2 73 2 66 71 2 73 2 65 59 66 71 2 75 33 2 77 76 65 66 71 2 73 2 65 55 66 71 2 73 2 65 55 66 71 2 65 33 2 65 66 66 71 68 37 50 2 65 66 67 2 73 2 65 66 71 2 65 66 71 68 37 2 65 2 2 72 2 2 72 29 2 66 67 42 65 2 72 2 72 2 66 71 68 35 22 2 65 22 2 66 67 38 2 92 2 71 68 35 22 2 65 22 2 66 67 38 91 2 92 2 71 68 68 1
34 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 73 2 73 2 71 27 2 73 2 73 2 73 2 73 2 71 27 2 73 2 73 2 73 2 73 2 71 27 2 73 2 73 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 71 27 2 73 2 73 2 73 2 71 27 2 73 2 73 2 73 2 71 37 11 2 19 2 67 2 2 71 2 2 71 2 2 71 112 2 36 50 2 65 2 2 66 67 42 73 2 65 2 66 71 2 65 2 73 2 73 2 66 71 2 2 75 65 2 66 2 65 2 73 2 73 2 66 71 2 65 2 66 71 2 75 65 2 66 2 65 2 73 2 73 2 66 71 2 75 33 2 65 45 66 71 2 75 65 2 66 2 65 2 73 2 73 2 66 71 2 73 2 65 33 2 65 45 72 53 66 66 71 2 73 2 65 59 66 71 2 73 2 65 2 66 71 68 112 2 37 5 2 65 2 2 66 67 2 65 66 73 2 65 2 73 2 73 2 72 2 66 71 38 59 71 68 112 2 37 5 2 65 2 2 66 67 29 2 75 2 73 2 65 66 71 25 65 2 82 2 73 2 73 2 66 67 38 59 71 68 38 42 73 2 65 2 66 71 68 37 11 2 19 2 73 2 77 2 73 2 76 67 35 20 2 2 71 35 20 2 2 71 35 2 69 70 2 71 35 2 69 70 2 71 37 2 65 2 2 66 67 2 75 2 73 2 65 66 73 2 65 2 73 2 73 2 66 71 2 75 2 73 2 65 66 73 2 65 2 73 2 73 2 66 71 2 75 2 71 2 75 2 73 2 65 2 66 71 68 112 2 37 2 2 65 2 2 72 29 2 66 67 38 33 2 65 2 73 2 65 2 73 2 73 2 72 2 72 60 66 66 71 68 112 2 37 50 2 65 2 2 72 29 2 66 67 2 73 2 73 2 65 2 69 2 70 66 71 2 73 2 73 2 65 2 69 2 70 66 71 68 35 2 2 65 2 2 66 67 38 2 65 58 72 2 72 2 73 2 66 71 68 35 2 2 65 2 2 72 22 2 66 67 38 2 65 58 72 2 72 2 66 71 68 35 2 2 65 2 2 72 2 2 72 22 2 66 67 2 77 80 76 2 75 61 71 49 67 2 75 2 73 2 65 2 90 58 90 2 66 71 68 9 65 2 2 66 67 2 73 2 65 66 71 68 49 67 2 77 80 76 2 69 70 75 2 73 2 65 66 71 25 65 2 73 2 65 2 66 66 67 38 65 2 66 2 69 53 70 73 2 65 66 71 68 17 67 38 65 2 66 2 69 53 70 73 2 65 2 66 71 68 68 9 65 2 2 66 67 2 73 2 65 66 71 68 9 65 2 2 66 67 2 73 2 65 66 71 68 9 65 2 2 66 67 2 73 2 65 66 71 68 38 61 71 68 112 2 37 29 2 65 66 67 38 2 82 61 80 53 81 2 73 2 71 68 37 11 2 19 2 73 2 67 2 2 71 2 2 71 2 65 2 2 66 67 42 65 2 66 71 2 75 65 2 66 2 73 2 65 2 73 2 73 2 66 71 2 75 65 2 66 2 73 2 65 2 73 2 73 2 66 71 2 73 2 65 33 2 73 2 65 66 67 112 2 37 50 2 65 2 2 66 67 2 2 75 65 65 2 66 2 73 2 65 2 73 2 73 2 66 66 73 2 65 66 73 2 65 66 73 2 65 58 72 58 66 71 25 65 2 73 2 65 58 66 85 91 53 66 67 2 2 75 2 73 2 65 53 72 2 73 2 65 58 66 66 71 22 2 75 2 73 2 65 2 73 2 65 2 73 2 65 58 66 90 53 72 2 73 2 65 58 66 66 66 71 2 2 75 2 65 2 72 2 66 71 2 73 2 65 2 66 71 68 17 67 2 2 75 2 65 2 66 71 2 73 2 65 2 66 71 68 2 73 2 65 66 71 68 68 66 71 68 68 68 68 1
"""


class NaiveJavaTokenHMM:
    """
    Multinomial HMM for java token predictions.
    Emissions are discrete over number of Java token types
    """

    def __init__(self, num_hidden_states=len(SourceCodeParser.JAVA_TOKEN_TYPE_MAP.items())):
        # Naive model. Hidden states have no inherent meaning?
        # hidden state count is initialized to number of tokens

        # start only at the first state
        start_probs = np.zeros(num_hidden_states)
        start_probs[0] = 1
        # hidden states start as random (normalized)
        rand_trans = np.random.rand(num_hidden_states, num_hidden_states)
        rand_trans_sums = rand_trans.sum(axis=1)
        transition_probs = rand_trans / rand_trans_sums[:, np.newaxis]

        self.model = MultinomialHMM(
            n_components=num_hidden_states,
            startprob_prior=start_probs,
            transmat_prior=transition_probs,
            algorithm="viterbi",
            verbose=True
        )
        # self.model.n_features = num_hidden_states
        _ddm = []
        for line in TEST_SEQ.splitlines():
            _ddr = np.array([], dtype=object)
            for token in line.split():
                _ddr = np.append(_ddr, int(token)) # need a cast?
            if _ddr.size:
                _ddm.append(_ddr)
            # _ddr = []
            # for token in line.split():
            #     _ddr.append(int(token))
            # if _ddr:
            #     _ddm.append(_ddr)

        x_ddm = np.array(_ddm, dtype=object)
        lengths = list(map(lambda v: len(v), _ddm))

        print(self.model)
        print(self.model.fit(x_ddm, lengths=lengths))
